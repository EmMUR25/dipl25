import torch
import torch.nn as nn
import torch.nn.functional as F

class LeNet5(nn.Module):
    def __init__(self, num_classes=1):
        super(LeNet5Seg, self).__init__()
        self.num_classes = num_classes

        # Конволюционная часть
        self.conv1 = nn.Conv2d(3, 6, 5, padding=2)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.pool2 = nn.MaxPool2d(2, 2)

        # Полносвязанные слои
        self.fc1 = nn.Linear(16 * 26 * 26, 120)
        self.fc2 = nn.Linear(120, 84)

        # Деконволюционная часть
        self.deconv1 = nn.ConvTranspose2d(84, 32, 3, stride=2, padding=1, output_padding=1)
        self.deconv2 = nn.ConvTranspose2d(32, 16, 3, stride=2, padding=1, output_padding=1)
        self.deconv3 = nn.ConvTranspose2d(16, num_classes, 3, stride=2, padding=1, output_padding=1)

    def forward(self, x):
        # Конволюционная часть
        x = self.pool1(F.relu(self.conv1(x)))
        x = self.pool2(F.relu(self.conv2(x)))

        # Преобразование в вектор
        x = x.view(-1, 16 * 26 * 26)

        # Полносвязанные слои
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))

        # Деконволюционная часть
        x = x.unsqueeze(2).unsqueeze(3)  # Преобразуем обратно в четырехмерный тензор
        x = F.relu(self.deconv1(x))
        x = F.relu(self.deconv2(x))
        x = self.deconv3(x)

        return x


